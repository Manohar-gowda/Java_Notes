1. What is an object?
     An object in java is an instance of a class. It represents a specific entity that has state(attribute or properties)
       and behaviour(methods). Example: If we have a class Car, an object of that class could be a specific car, like a "Toyota Camry"
       with attribute like color (state) and methods like drive() (behaviour). Objects are created using the new keyword,
         e.g., Car myCar = new Car();

 2. What is method overriding in java?
      Occurs when a subclass provides a specific implementation of a method that is already defined in its superclass.
       The method in the subclass must have the same name, return type, and parameters as the method in the superclass.

       class Animal {
          void sound() {
             sout("Some sound);
          }
        }

        class Dog extends Animal {
           @Override
           void sound() {
             sout("Bark");
           }
        }

 3. What is the super keyword in java?
     The super() keyword in java is used to refer to the immediate parent class of a subclass.
        - Calling the parent class constructor.
            super()
        - Accessing parent class methods or fields.
            super().methodName()
            super().fieldName

 4. What is method overloading in java?
      Allows a class to have multiple methods with the same name but different parameter lists(signature)
      It's the form of compile-time polymorphism. The return type alone isn't enough to distinguish overloaded methods.

       class Calculator {
          int add(int a, int b) {
            return a + b;
          }

          double add(double a, double b) {
            return a + b;
          }

          int add(int a, int b, int c) {
            return a + b + c;
          }
       }

 5. Difference between Java and C++ ?
     * Platform dependency:  C++ is platform-dependent(compiled to machine code), while java is
           platform-independent(compiled to bytecode, runs on the JVM).
     * Memory Management:
           C++ uses manual memory management (e.g., new and delete), while Java has automatic garbage collection.
     * Multiple Inheritance: C++ supports multiple inheritance, but Java does not (it uses interfaces instead)
     * Pointers: C++ has pointers, which allow direct memory manipulation, while Java does not expose pointers to developers.
     * Performance: C++ is generally faster since it's closer to hardware, but Java is slower due to the JVM overhead.
     * Use Case: C++ is often used for system-level programming, while Java is more common in enterprise applications.

 6. What is JIT compiler:
     Just-In-Time compiler in Java is part of the JVM. It compiles Java bytecode into native machine code at runtime, rather than
        interpreting it line by line, which improves performance.

 7. What is bytecode in Java?
     It is an intermediate representation of a Java program. When we compile a Java source file (.java) using the javac
       compiler, it generates bytecode (a .class file). This bytecode is platform-independent and can be executed on any device
        with a JVM.

 8. Difference between abstract class and interface?
      - Abstract Class:
         * Can have both abstract (unimplemented) and concrete (implemented) methods.
         * Supports instance variables(fields).
         * A class can extend only one abstract class (no multiple inheritance).
         * Can have constructors.

      - Interface:
         * Can only have abstract methods (until Java 8, now it can have default and static methods).
         * Only constants (public static final fields) are allowed, no instance variable.
         * A class can implement multiple interfaces (supports multiple inheritance).
         * No constructors.

 9. Why Java is platform independent?
      because, it uses the "write once, run anywhere"(WORA) principle. When Java program is compiled, it is converted into
         bytecode. This bytecode can run on any device that has a JVM.

 10. Difference between this() and super() :
       - this(): refers to the current class
         * Call another constructor of the same class(constructor chaining).
         * Differentiate between instance variables and parameters with the same name.

       - super(): refers to the parent class.
         * Call the parent class's constructor.
         * Access parent class methods or fields.

 11. How to call one constructor from another?
      using this(). This is called constructor chaining. The this() call must be the first statement in the constructor.

 12. What are static blocks and static initializers?
      - Static Blocks: are blocks of code enclosed in {} and marked with the static keyword.
           They are executed only once when the class is loaded into memory by the JVM, before object creation or static method class.

      - Static Initializers: The initialization of static variables at the time of declaration.
           static int x;

 13. What is constructor in Java?
       Special method used to initialize objects of class. It has the same name as the class, no return type, and is called automatically
           when an object is created using the new keyword. Constructor can be overloaded.

 14. Difference between Character constant and String constant?
       - Character constant: A single character enclosed in single quotes, 'A'. Its datatype is char and represents single Unicode character.
       - String Constant: A sequence of characters enclosed in double quotes, "Hello". Its type String and represents an object in java.

 15. Why main() method is public, static and void in Java?
       - public: The main() method must be public so the JVM can access it from outside the class to start the program.
       - static: It's static so the JVM can call it without creating an instance of the class. The JVM doesn't instantiate the
            class to run main().
       - void(): It returns void because the JVM doesn't expect a return value from main(). The programs exit status is handled separately(via System.exit()).

 16. Explain main() method?
       - It must be public, static and void:
       - The String[]  args parameter allows the program to accept command-line arguments.
       - If the main() method is missing or has an incorrect signature, the JVM throes an error.

 17. What is difference between length and length()?
       - length : property used with arrays to get the number of elements in the array.
       - length() : method used with String objects to get the number of Characters in the string.

 18. What is ASCII code?
      American Standard Code for Information Interchange is a character encoding standard that assigns a unique number to each
         character. For 'A' : 65 , 'a' : 97
         In java we can get ASCII value of a character by casting it into an int.

 19. What is Unicode?
       Assigns a unique code point to every character in almost all writing systems.
       Unlike ASCII, unicode uses 16 bits or more (up to 65,536+ characters).
       char ch = '\u0041';  for 'A'

 20. Explain wrapper classes in java?
     Way to use primitive data types as objects.
     Each primitive type has a corresponding wrapper class in the java.lang package.
       ex: Byte, Short, Integer ...... Boolean
     We use wrapper classes
       - To use primitives in the collections (ArrayList<Integer>)
       - To use methods and fields provided by wrapper classes (Integer.parseInt())

 21. Transient variables:
     In java, the transient key word is used to indicate that a variable should not be serialized when an object is written to
       to a stream.

 22. Static variables are not serialized in the java. Serialization applies to the state of an object, and static variables
      belong to the class, not an instance of the class.

 23. Varargs: Allow methods to accept a variable number of arguments of the same type. It is denoted by three dots (...) in
     the method parameter.
       * A method can have only one varargs parameter, and it must be the last parameter.
       * Internally, varargs are implemented as an array.

       static void printNumbers(int... nums) {
          for(int ele : nums) {
            sout(ele);
          }
       }

       psvm(String[] args) {
          printNumbers(1, 2, 3);
       }

 24. In java how do we copy objects?
     1. Shallow Copy:
        * Copies the object's fields, but if the fields are referenced to other objects, only the references are copied, not
           the objects they point to.
        * Can be achieved using the clone() method (if the class implements Cloneable) or by assigning one reference to another.

        public class Person implements Cloneable {
           String name;
           int age;

            Person(String name, int age) {
               this.name = name;
               this.age = age;
            }

            @Override
            protected Object clone() throws CloneNotSupportedException {
               return super.clone();
            }
        }

        class Main {
            public static void main(String[] args) {
                Person p1 = new Person("Alice", 25);
                Person p2 = (Person) p1.clone();
                sout(p2.name + ", " + p2.age);
            }
        }

     2. Deep Copy:
        * Creates a completely independent copy of the object and all objects it referenced.
        * Requires manual implementation or using serialization.

        public class Person implements Serializable {
                   String name;
                   int age;

                    Person(String name, int age) {
                       this.name = name;
                       this.age = age;
                    }

                    public Person deepCopy() throws Exception {
                       ByteArrayOutputStream bos = new ByteArrayOutputStream();
                       ObjectOutputStream out = new ObjectOutputStream(bos);
                       out.writeObject(this);

                       ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
                       ObjectOutputStream in = new ObjectOutputStream(bis);
                       return (Person) in.readObject();


                    }
                }

                class Main {
                    public static void main(String[] args) {
                        Person p1 = new Person("Alice", 25);
                        Person p2 = (Person) p1.deepCopy();
                        sout(p2.name + ", " + p2.age);
                    }
                }